name: CourseForge CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and test jobs
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ matrix.workspace }}
      run: npm ci

    - name: Run linting
      working-directory: ${{ matrix.workspace }}
      run: npm run lint

    - name: Run type checking
      working-directory: ${{ matrix.workspace }}
      run: npm run type-check

    - name: Run tests
      working-directory: ${{ matrix.workspace }}
      run: npm test
      env:
        CI: true

    - name: Generate test coverage
      if: matrix.workspace == 'backend'
      working-directory: ${{ matrix.workspace }}
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      if: matrix.workspace == 'backend'
      uses: codecov/codecov-action@v3
      with:
        directory: ${{ matrix.workspace }}/coverage

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Database migration check
  database-check:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: courseforge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: backend
      run: npm ci

    - name: Run database migrations
      working-directory: backend
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/courseforge_test

    - name: Seed test data
      working-directory: backend
      run: npm run db:seed
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/courseforge_test

  # Deployment to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, database-check]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment scripts here
        # This could involve:
        # - Updating docker-compose files with new image tags
        # - Running deployment scripts
        # - Notifying deployment systems
        
    - name: Run integration tests
      run: |
        echo "Running integration tests against staging..."
        # Add integration test commands here

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Deployment to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment scripts here
        # This should include:
        # - Database migrations
        # - Blue-green deployment
        # - Health checks
        # - Rollback procedures

    - name: Health check
      run: |
        echo "Performing health checks..."
        # Add health check commands here

    - name: Notify successful deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'üöÄ Production deployment successful!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify failed deployment
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: '‚ùå Production deployment failed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}