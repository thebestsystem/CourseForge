// Simplified schema for SQLite development
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User Management - Simplified
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  role      String   @default("EDUCATOR") // STUDENT, EDUCATOR, ADMIN, SUPER_ADMIN
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses      Course[]
  documents    Document[]
  executions   AIAgentExecution[]
  subscription Subscription?

  @@map("users")
}

// Subscription - Simplified
model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  plan      String   @default("FREE") // FREE, BASIC, PRO, ENTERPRISE
  status    String   @default("ACTIVE") // ACTIVE, CANCELED, PAST_DUE, TRIALING
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// Course Management - Simplified
model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  authorId    String
  status      String   @default("DRAFT") // DRAFT, IN_PROGRESS, REVIEW, PUBLISHED, ARCHIVED
  visibility  String   @default("PRIVATE") // PRIVATE, INTERNAL, PUBLIC
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author     User               @relation(fields: [authorId], references: [id])
  documents  Document[]
  executions AIAgentExecution[]

  @@map("courses")
}

// Document Management - Simplified for Module B
model Document {
  id            String   @id @default(cuid())
  title         String
  filename      String
  filePath      String
  fileSize      Int
  mimeType      String
  type          String // PDF, DOCX, DOC, TXT, MD, IMAGE, VIDEO, AUDIO
  status        String   @default("UPLOADING") // UPLOADING, PROCESSING, READY, ERROR
  ownerId       String
  courseId      String?
  extractedText String? // Simplified content extraction
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  owner  User    @relation(fields: [ownerId], references: [id])
  course Course? @relation(fields: [courseId], references: [id])

  @@map("documents")
}

// AI Agents - Core for Module D
model AIAgent {
  id           String   @id @default(cuid())
  type         String   @unique // ARCHITECT, RESEARCH, WRITING, EDITING, DESIGN, QUALITY, MARKETING
  name         String
  description  String
  capabilities String // JSON string for array of capabilities
  systemPrompt String
  model        String   @default("gpt-4")
  temperature  Float    @default(0.7)
  maxTokens    Int      @default(2000)
  isEnabled    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  executions AIAgentExecution[]

  @@map("ai_agents")
}

// AI Agent Executions
model AIAgentExecution {
  id          String    @id @default(cuid())
  agentType   String
  courseId    String?
  userId      String
  input       String // JSON string for input data
  output      String? // JSON string for output data
  status      String    @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED, CANCELED
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  duration    Int? // in milliseconds
  cost        Float? // in USD

  // Relations
  agent  AIAgent @relation(fields: [agentType], references: [type])
  course Course? @relation(fields: [courseId], references: [id])
  user   User    @relation(fields: [userId], references: [id])

  @@map("ai_agent_executions")
}
