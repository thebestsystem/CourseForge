version: '3.8'

services:
  # Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: courseforge_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - courseforge_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: courseforge_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-courseforge}
      POSTGRES_USER: ${POSTGRES_USER:-courseforge}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - courseforge_network
    # Only expose internally in production
    # ports: [] 

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: courseforge_redis
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - courseforge_network
    # Only expose internally in production
    # ports: []

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: courseforge_minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    networks:
      - courseforge_network
    # Console available via nginx proxy in production

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: courseforge_backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${POSTGRES_USER:-courseforge}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-courseforge}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN:-30d}
      
      # AI API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLAUDE_API_KEY: ${CLAUDE_API_KEY}
      HUGGINGFACE_API_KEY: ${HUGGINGFACE_API_KEY}
      COHERE_API_KEY: ${COHERE_API_KEY}
      
      # External Services
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Storage
      STORAGE_PROVIDER: minio
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-courseforge-uploads}
      MINIO_USE_SSL: "false"
      
      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      
      # Application URLs
      FRONTEND_URL: ${FRONTEND_URL}
      BACKEND_URL: ${BACKEND_URL}
      
      # Security
      BCRYPT_SALT_ROUNDS: ${BCRYPT_SALT_ROUNDS:-12}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # AI Configuration
      DEFAULT_AI_MODEL: ${DEFAULT_AI_MODEL:-gpt-4}
      AI_TEMPERATURE: ${AI_TEMPERATURE:-0.7}
      AI_MAX_TOKENS: ${AI_MAX_TOKENS:-2000}
      AI_TIMEOUT: ${AI_TIMEOUT:-30000}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      - postgres
      - redis
      - minio
    volumes:
      - backend_logs:/app/logs
    restart: unless-stopped
    networks:
      - courseforge_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: courseforge_frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - courseforge_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_logs:
    driver: local

networks:
  courseforge_network:
    driver: bridge